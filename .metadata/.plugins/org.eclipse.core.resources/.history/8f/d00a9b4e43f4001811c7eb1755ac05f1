import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.Spinner;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import java.text.DecimalFormat;
import java.util.Optional;

public class LabSix extends Application
{
	double numberOfYears;
	double monthlyPayment;
	double totalPayment;
	double annualInterestRate; 
	double loanAmount;
	double monthlyInterestRate;
	private static DecimalFormat outputFormatter = new DecimalFormat(".##");
	
	TextField Mp = new TextField(); 
	TextField Tp = new TextField(); 
	TextField Air = new TextField(); 
	TextField La = new TextField(); 
	Button Calc = new Button("Calculate the Net Payment");
	Button Clear = new Button("Reset all the fields");
	Button Info = new Button("Information about project");
	Spinner<Integer> spinner1 = new Spinner<>(1, 100, 1);

	@Override
    public void start(Stage primaryStage)
    {
		primaryStage.setOnCloseRequest(confirmCloseEventHandler);

        Button closeButton = new Button("Close Application");
        closeButton.setOnAction(event ->
        primaryStage.fireEvent(
                        new WindowEvent(
                        		primaryStage,
                                WindowEvent.WINDOW_CLOSE_REQUEST
                        )
                )
        );

    	GridPane pane = new GridPane();
    	pane.setAlignment(Pos.CENTER);
    	pane.setPadding(new Insets(11.5,12.5,13.5,14.5));
    	pane.setHgap(5.5);
    	pane.setVgap(5.5);
    	

    	pane.add(new Label("Annual Interest Rate: "), 0, 0);
    	pane.add(Air, 1, 0);
    	
    	pane.add(new Label("Number of Years: "), 0, 1);
    	pane.add(spinner1, 1, 1);
    	
    	pane.add(new Label("Loan Amount: "), 0, 2);
    	pane.add(La, 1, 2);
    	
    	pane.add(new Label("Monthly Payment: "),0,3);
    	pane.add(Mp,1,3);
    	
    	pane.add(new Label("Total Payment: "),0,4);
    	pane.add(Tp,1,4);
    	
    	pane.add(Clear,0,5);
    	pane.add(Calc,1,5);
    	
    	pane.add((closeButton), 0, 6);
    	pane.add((Info), 1, 6);
    	
    	//Avoid User Tempering With Data
    	Mp.setEditable(false);
    	Tp.setEditable(false);
    	
    	//Create a scene  and place it in the stage    	
    	Scene scene = new Scene(pane);
    	primaryStage.setTitle("Parth 300986134");
    	primaryStage.setScene(scene);
    	primaryStage.show();    
    	
    	CalculateListenerClass listener1 = new CalculateListenerClass();
		Calc.setOnAction(listener1);
		
		ClearListenerClass listener2 = new ClearListenerClass();
		Clear.setOnAction(listener2);
		
		InfoListenerClass listener4 = new InfoListenerClass();
		Info.setOnAction(listener4);

    }

	public static void main(String[] args) 
	{
		Application.launch(args);	
	}
	
	class CalculateListenerClass implements EventHandler<ActionEvent>
	{
	  @Override
	  public void handle(ActionEvent e)
	  {
		annualInterestRate = Double.valueOf(Air.getText()); 
		numberOfYears = Double.valueOf(spinner1.getValue());
		loanAmount = Double.valueOf(La.getText());
		monthlyInterestRate = annualInterestRate / 1200;
		monthlyPayment = loanAmount * monthlyInterestRate / (1 - (1 / Math.pow(1+ monthlyInterestRate, numberOfYears * 12)));
		totalPayment  =  monthlyPayment * numberOfYears * 12;
		Tp.setText(String.valueOf(outputFormatter.format(totalPayment)));
		Mp.setText(String.valueOf(outputFormatter.format(monthlyPayment)));	    
	  }
	}
	
	class ClearListenerClass implements EventHandler<ActionEvent>
	{
	  @Override
	  public void handle(ActionEvent e)
	  {
	    Mp.setText(""); 
		Tp.setText(""); 
		Air.setText("");
		spinner1.getValueFactory().setValue(1);
		La.setText("");
	  }
	}
	
	class InfoListenerClass implements EventHandler<ActionEvent>
	{
	  @Override
	  public void handle(ActionEvent e)
	  {
		  Alert alert = new Alert(AlertType.INFORMATION);
		  alert.setTitle("More About Lab 6!!");
		  alert.setHeaderText("Additional Features");
		  alert.setContentText
		  (
				  "1.There's Spinner for Selecting Loan Year" 
				  + "\n2.You Can not Change or Enter the Value into the Following Fields. "
				  + "\n\t\tTotal Payment. "
				  + "\n\t\t Monthly Payment."
				  + "\n3.There is Reset Button to set all fields."
				  + "\n4.All of the Data is stored in Private Variable."
				  + "\n5.Application will ask for Confirmation While Closing."
				  + "\n6.There's An Info Section for what's Enhanced."
				  + "\n7.Developer's Info is Mentioned in Info Section."
				  + "\n"
				  + "\n"
				  + "\n"
				  + "\n-----------------------------"
				  + "\nDeveloper: Parth Chandgadhiya"
				  + "\n Student ID: 300986134"
				  + "\nYear Developed: 2018"
				  
		  );

		  alert.showAndWait();
	  }
	}
	private EventHandler<WindowEvent> confirmCloseEventHandler = event -> {
        Alert closeConfirmation = new Alert(
                Alert.AlertType.CONFIRMATION,
                "Are you sure you want to exit?"
        );
        Button exitButton = (Button) closeConfirmation.getDialogPane().lookupButton(
                ButtonType.OK
        );
        exitButton.setText("Exit");
        
        closeConfirmation.setHeaderText("Confirm Exit");
        closeConfirmation.initModality(Modality.APPLICATION_MODAL);

        Optional<ButtonType> closeResponse = closeConfirmation.showAndWait();
        if (!ButtonType.OK.equals(closeResponse.get())) {
            event.consume();
        }
    };
}
